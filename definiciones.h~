#ifndef _ALEX_DEFINICION_H_
#define _ALEX_DEFINICION_H_

#include <NTL/ZZ.h>
#include "prototipos.h"
#include <iostream>

using namespace std;
using namespace NTL;

template <typename T>
T modulo(T value,T modulo)
{
  T cociente=value/modulo;
  if(value>=0)
    return value-cociente*modulo;
  return modulo-(value*-1+cociente*modulo);
}

template <typename T>
T euclides(T a,T b)
{
  if(b==0)
    return a;
  return euclides(b,modulo(a,b));
}
template <typename T>
bool and_binari(T n)
{
  T cero;
  cero=0;
  if(n==cero)
    return false;
  return true;
}

template <typename T>
void euclides_extendido(T a,T b,T &mcd,T &x,T &y)
{
  T x1,y1;

  if(b==0){
    mcd=a;
    x=1;
    y=0;
  }
  else{
    euclides_extendido(b,modulo(a,b),mcd,x,y);
    x1= x;
    y1=y;
    x=y1;
    y=x1-(a/b)*y1;
  }
}
string int_to_string(ZZ number)
{
  string palabra;
  char numeros[10]={'0','1','2','3','4','5','6','7','8','9'};
  char temp;
  int size;
  ZZ diez;
  diez=10;

  while(number!=0){
    palabra+=numeros[ZZ_to_int(modulo(number,diez))];
    number/=10;
  }
  size=palabra.length();
  for (int i=0;i<size/2;i++){
    temp=palabra[i];
    palabra[i]=palabra[size-i-1];
    palabra[size-i-1]=temp;
  }
  return palabra;
}



bool is_primo(ZZ number)
{
  ZZ i,raizCuadrada;
  raizCuadrada=SqrRoot(number);
  for(i=2;i<raizCuadrada+1;i++){
    if(modulo(number,i)==0)
      return false;
  }|
  if(number==0)
    return false;
  return true;
}

int ZZ_to_int(ZZ number)
{////////// un prerequisito es que number sea de 4 bytes o menos
  unsigned int sumador,crece;
  ZZ conejo,creciente,i;
  sumador=0;
  creciente=1;
  conejo=1;
  crece=1;

  for(i=1;i<NumBits(number)+1;i++){
    creciente=conejo & number;
    if(and_binari(creciente)){
      sumador+=crece;
    }
    else creciente=conejo;
    creciente<<=1;
    conejo=conejo<<1;
    crece<<=1;
  }

  return sumador;
}

template <typename T>
T exponenciacion_modular(T m,T e,T n)
{
  T elevado1,elevado2,resultado,dos;
  dos=2;
  elevado1=m;
  elevado2=1;
  resultado=1;

  while(e!=0){
    elevado1=elevado2=modulo((elevado1*elevado2),n);
    if(modulo(e,dos)==1){
      resultado=modulo((resultado*elevado1),n);
    }
    e/=2;
  }
  return resultado;
}

#endif
